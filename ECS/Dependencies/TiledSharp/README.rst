TiledSharp
==========
A .NET C# library for importing Tiled TMX tile maps

*Note to current users*

I am considering some minor changes to the TiledSharp API.  `See the GitHub
issue for more information`_.

.. _`See the GitHub issue for more information`:
   https://github.com/marshallward/TiledSharp/issues/29


About TiledSharp
----------------
TiledSharp is a .NET C# library for importing TMX_ tilemaps and TSX tilesets
generated by Tiled_, a tile map generation tool. The data is saved as a TmxMap_
object, whose structure closely resembles the original TMX file.

As a generic TMX and TSX parser, TiledSharp does not render the maps or depend
on any external framework beyond .NET, such as Windows, XNA/MonoGame, Unity, or
PSM. However, it can be used as an interface between TMX data and external
games.


Usage
-----
To import a TMX file into your C# application:

- Include a reference to TiledSharp. You can either incorporare it directory
  into your own project, or you can pre-compile it and include the DLL.

- Import the TiledSharp namespace (optional):

  .. code:: csharp

     using TiledSharp;

- Create a Map object using the constructor:

  .. code:: csharp

     var map = new TmxMap("someMap.tmx");

  TiledSharp supports both resource names and file paths, and should work as
  expected in most situations. For more details, please consult the wiki.

- Access the TMX data using the Map fields. Principal classes can be accessed
  by either name or index:

  .. code:: csharp

     var map = new TmxMap("someMap.tmx");
     var version = map.Version;
     var myTileset = map.Tilesets["myTileset"];
     var myLayer = map.Layers[2];
     var hiddenChest = map.ObjectGroups["Chests"].Objects["hiddenChest"];

Map data fields correspond closely to the TMX file structure. For a complete
listing, see the documentation_.

Although TiledSharp can manage elements with the same name, it is not
recommended. For more information, see the TmxList_ specification.


Examples
--------

- Github user Temeez_ has provided a simple example of a MonoGame project using
  TiledSharp:

  https://github.com/Temeez/TiledSharp-MonoGame-Example

- Tesserae_ was an attempt to create a general TMX renderer for MonoGame.  I
  still don't feel that it's ready for general use, but it may help others to
  develop their own renderers.

  An example game using Tesserae is available here:

  https://github.com/marshallward/DemoGame


Notes
-----
TiledSharp parses XML files produced by Tiled_, an open-source (GPL) tile map
editor developed and maintained by Thorbj√∏rn Lindeijer.

Zlib decompression in TiledSharp uses the Zlib implementation of DotNetZip_
v1.9.1.8.  Minor modifications were added for use on Android and iOS.


Licensing
---------
TiledSharp_ is distributed under the `Apache 2.0 License`_. The code can be
used freely in any project, including commercial software, and does not place
any restrictions on your own code. But any changes to TiledSharp must be
documented explicitly.

Attribution is not necessary, but always appreciated.

Support code from DotNetZip_ is distributed under the `Microsoft Public
License`_.


Contact
-------
Marshall Ward <tiledsharp@marshallward.org>

.. _TMX: https://github.com/bjorn/tiled/wiki/TMX-Map-Format
.. _Tiled: http://mapeditor.org
.. _TmxMap:
    http://marshallward.github.io/TiledSharp/classTiledSharp_1_1TmxMap.html
.. _TiledSharp: https://github.com/marshallward/TiledSharp
.. _documentation:
    http://marshallward.github.io/TiledSharp/index.html
.. _TiledSharp Data Hierarchy:
    https://github.com/marshallward/TiledSharp/wiki/TiledSharp-Data-Hierarchy
.. _TmxList: https://github.com/marshallward/TiledSharp/wiki/TmxList
.. _DotNetZip: http://dotnetzip.codeplex.com
.. _Temeez: https://github.com/Temeez
.. _Tesserae: https://github.com/marshallward/Tesserae
.. _Apache 2.0 License:
    http://www.apache.org/licenses/LICENSE-2.0.txt
.. _Microsoft Public License:
    http://www.microsoft.com/en-us/openness/licenses.aspx#MPL
